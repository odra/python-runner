#!/usr/bin/env python
import argparse
import json
import sys

from smrunner import fn, errors, response


parser = argparse.ArgumentParser(description='runs a function from file or json data')
parser.add_argument('-j', '--json', action='store_true', default=False, help='flag to return response as json')
parser.add_argument('-p', '--params', default=dict(), help='params to be used in the function, in json format (array or dict)')
parser.add_argument('-d', '--data', help='python code object data to be used in json format')
parser.add_argument('-f', '--file', help='function file to be imported')


def call(**kwargs):
  params = kwargs.get('params', {})
  file = kwargs.get('file')
  data = kwargs.get('data')
  fn_name = None
  func = None
  if data is not None:
    code = fn.Code.from_json(data)
    func = fn.Function.from_code(code)
  if file is not None:
    code = fn.Code.from_file(file)
    func = fn.Function.from_code(code)
  if func is None:
    raise errors.FunctionNotFoundError(fn_name)
  if type(params) is list:
    return func(*params)
  return func(**params)


def run(*args, **kwargs):
  args = parser.parse_args(*args, **kwargs)
  params = {
  'params': args.params,
  'file': args.file,
  'data': args.data
  }
  try:
    result = call(**params)
  except errors.BaseError as e:
    if args.json is False:
      sys.stderr.write('%s\n' % e.message)
    else:
      sys.sterr.write('%s\n' %response.Response.as_result(code=e.code, message=e.message, data=e.data).as_json())
    return
  if args.json is False:
    sys.stdout.write('%s\n' % result)
  else:
    sys.stdout.write('%s\n' % response.Response.as_result(data=result).as_json())


if __name__ == '__main__':
  run()
